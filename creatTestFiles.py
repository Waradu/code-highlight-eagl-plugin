import os

# List of extensions
extensions = [
    "py",
    "css",
    "html",
    "htm",
    "scss",
    "js",
    "rss",
    "cpp",
    "c++",
    "h",
    "cs",
    "java",
    "yaml",
    "ts",
    "ps1",
    "psm1",
    "psd1",
    "ps",
    "vue",
    "php",
    "rb",
    "swift",
    "kt",
    "kts",
    "go",
    "pl",
    "R",
    "r",
    "sh",
    "console",
    "clj",
    "scala",
    "hs",
    "lua",
    "erl",
    "sql",
    "xml",
    "json",
    "Dockerfile",
    "Makefile",
    "aspx",
    "tcl",
    "f",
    "for",
    "f90",
    "f95",
    "less",
    "styl",
    "coffee",
    "cson",
    "iced",
    "jsx",
    "ada",
    "bf",
    "dns",
    "zone",
    "bind",
    "hx",
    "ini",
    "toml",
    "julia-repl"
]

# Dictionary to store sample content for each file type
sample_content = {
    "py": 'print("Hello, world!")',
    "css": 'body {\n  background-color: lightblue;\n}',
    "html": '<!DOCTYPE html>\n<html>\n  <body>\n    <h1>Hello, World!</h1>\n  </body>\n</html>',
    "htm": '<!DOCTYPE html>\n<html>\n  <body>\n    <h1>Hello, World!</h1>\n  </body>\n</html>',
    "scss": '$primary-color: #333;\nbody {\n  color: $primary-color;\n}',
    "js": 'console.log("Hello, world!");',
    "rss": '<?xml version="1.0"?>\n<rss version="2.0">\n  <channel>\n    <title>RSS Title</title>\n  </channel>\n</rss>',
    "cpp": '#include <iostream>\n\nint main() {\n  std::cout << "Hello, world!";\n  return 0;\n}',
    "c++": '#include <iostream>\n\nint main() {\n  std::cout << "Hello, world!";\n  return 0;\n}',
    "h": '#ifndef MYHEADER_H\n#define MYHEADER_H\n\nvoid myFunction();\n\n#endif',
    "cs": 'using System;\n\nclass Program {\n  static void Main() {\n    Console.WriteLine("Hello, world!");\n  }\n}',
    "java": 'public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println("Hello, world!");\n  }\n}',
    "yaml": 'greeting: "Hello, world!"',
    "ts": 'console.log("Hello, world!");',
    "ps1": 'Write-Output "Hello, world!"',
    "psm1": 'Write-Output "Hello, world!"',
    "psd1": 'Write-Output "Hello, world!"',
    "ps": 'Write-Output "Hello, world!"',
    "vue": '<template>\n  <div>Hello, world!</div>\n</template>\n\n<script>\nexport default {\n  name: "HelloWorld"\n}\n</script>',
    "php": '<?php\n  echo "Hello, world!";\n?>',
    "rb": 'puts "Hello, world!"',
    "swift": 'print("Hello, world!")',
    "kt": 'fun main() {\n  println("Hello, world!")\n}',
    "kts": 'fun main() {\n  println("Hello, world!")\n}',
    "go": 'package main\n\nimport "fmt"\n\nfunc main() {\n  fmt.Println("Hello, world!")\n}',
    "pl": 'print "Hello, world!\\n";',
    "R": 'cat("Hello, world!\\n")',
    "r": 'cat("Hello, world!\\n")',
    "sh": 'echo "Hello, world!"',
    "console": 'echo "Hello, world!"',
    "clj": '(println "Hello, world!")',
    "scala": 'object HelloWorld {\n  def main(args: Array[String]): Unit = {\n    println("Hello, world!")\n  }\n}',
    "hs": 'main = putStrLn "Hello, world!"',
    "lua": 'print("Hello, world!")',
    "erl": '-module(hello).\n-export([hello_world/0]).\n\nhello_world() ->\n  io:format("Hello, world!~n").',
    "sql": 'SELECT \'Hello, world!\';',
    "xml": '<?xml version="1.0"?>\n<message>\n  <text>Hello, world!</text>\n</message>',
    "json": '{\n  "greeting": "Hello, world!"\n}',
    "Dockerfile": 'FROM alpine:latest\nCMD echo "Hello, world!"',
    "Makefile": 'all:\n\t@echo "Hello, world!"',
    "aspx": '<%@ Page Language="C#" %>\n<!DOCTYPE html>\n<html>\n  <body>\n    <h1>Hello, World!</h1>\n  </body>\n</html>',
    "tcl": 'puts "Hello, world!"',
    "f": 'PROGRAM HELLO\n  PRINT *, "Hello, world!"\nEND PROGRAM HELLO',
    "for": 'PROGRAM HELLO\n  PRINT *, "Hello, world!"\nEND PROGRAM HELLO',
    "f90": 'PROGRAM HELLO\n  PRINT *, "Hello, world!"\nEND PROGRAM HELLO',
    "f95": 'PROGRAM HELLO\n  PRINT *, "Hello, world!"\nEND PROGRAM HELLO',
    "less": '@primary-color: #333;\nbody {\n  color: @primary-color;\n}',
    "styl": 'body\n  color: white\n  background-color: black',
    "coffee": 'console.log "Hello, world!"',
    "cson": '{\n  greeting: "Hello, world!"\n}',
    "iced": 'console.log "Hello, world!"',
    "jsx": 'const HelloWorld = () => <h1>Hello, world!</h1>;',
    "ada": 'with Ada.Text_IO; use Ada.Text_IO;\nprocedure Hello is\nbegin\n  Put_Line("Hello, world!");\nend Hello;',
    "bf": '++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.',
    "dns": '; Hello, world! zone file\n$TTL 86400\n@    IN    SOA   ns.example.com. admin.example.com. (\n              1   ; Serial\n          604800   ; Refresh\n           86400   ; Retry\n         2419200   ; Expire\n          604800 ) ; Negative Cache TTL\n;\n@    IN    NS    ns.example.com.\n@    IN    A     192.0.2.1\n',
    "zone": '; Hello, world! zone file\n$TTL 86400\n@    IN    SOA   ns.example.com. admin.example.com. (\n              1   ; Serial\n          604800   ; Refresh\n           86400   ; Retry\n         2419200   ; Expire\n          604800 ) ; Negative Cache TTL\n;\n@    IN    NS    ns.example.com.\n@    IN    A     192.0.2.1\n',
    "bind": '; Hello, world! zone file\n$TTL 86400\n@    IN    SOA   ns.example.com. admin.example.com. (\n              1   ; Serial\n          604800   ; Refresh\n           86400   ; Retry\n         2419200   ; Expire\n          604800 ) ; Negative Cache TTL\n;\n@    IN    NS    ns.example.com.\n@    IN    A     192.0.2.1\n',
    "hx": 'class Hello {\n  static public function main() {\n    trace("Hello, world!");\n  }\n}',
    "ini": '[Settings]\ngreeting=Hello, world!',
    "toml": 'greeting = "Hello, world!"',
    "julia-repl": 'println("Hello, world!")'
}

# Create a directory for the test files
os.makedirs("test_files", exist_ok=True)

# Generate test files
for ext in extensions:
    content = sample_content.get(ext, "// Hello, world!")  # Default content for unknown extensions
    if (content == "// Hello, world!"):
        print("Unknown extension: " + ext)
    file_name = f"test_files/test.{ext}"
    with open(file_name, "w") as file:
        file.write(content)

print("Test files generated successfully.")
